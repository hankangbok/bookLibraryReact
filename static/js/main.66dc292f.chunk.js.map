{"version":3,"sources":["newBookForm.js","index.js"],"names":["NewBookFormEntry","React","Component","_React$Component2","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isVisible","formValidated","handleFormClick","bind","assertThisInitialized","inherits","createClass","key","value","console","log","setState","react_default","a","createElement","id","visibility","completed","htmlFor","name","required","type","onClick","handleSubmit","ReadToggle","isReadorNot","thisBook","isRead","handleClick","newReadStatus","isReadButton","RemoveBookFromLibrary","title","SingleBook","aBook","author","numPages","genre","className","src_ReadToggle","src_RemoveBookFromLibrary","LibraryContainer","_this2","allBooks","handleRemoveClick","e","theTitle","currentTarget","allBooks1","index","findIndex","eachBook","splice","_this3","rows","forEach","bookinlist","push","src_SingleBook","Library","_this4","dummystate","newBook","handleFormSubmit","preventDefault","allinputs","document","querySelectorAll","formcompleted","buttonscompleted","inputitem","getElementsByName","onebutton","checked","getElementById","pages","haveRead","querySelector","asRead","alert","concat","newBookForm_NewBookFormEntry","src_LibraryContainer","books","booksList","ReactDOM","render","src_Library"],"mappings":"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","file":"static/js/main.66dc292f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class NewBookFromForm extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>This is where the new Book object goes</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class NewBookFormEntry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isVisible: true,\r\n      // visibility: \"visible\"\r\n      formValidated: false,\r\n    };\r\n    // this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n    this.handleFormClick = this.handleFormClick.bind(this);\r\n  }\r\n\r\n// Should get the values of fields in the form and save them to a new book object\r\n  // handleFormSubmit(e) {\r\n  //   e.preventDefault();\r\n  //   const allinputs = document.querySelectorAll('input[required]');\r\n  //   // console.log(allinputs);\r\n  //   var formcompleted = true;\r\n  //   var buttonscompleted = false;\r\n  //   allinputs.forEach((inputitem, index) => {\r\n  //     // console.log(inputitem.value);\r\n  //     if (inputitem.value===null || inputitem.value=='') {\r\n  //       formcompleted = false;\r\n  //     }\r\n  //   })\r\n  //   const radioinputs = document.getElementsByName('haveRead');\r\n  //   radioinputs.forEach((onebutton) => {\r\n  //     if (onebutton.checked) {\r\n  //       buttonscompleted = true;\r\n  //     }\r\n  //   })\r\n  //   if (formcompleted && buttonscompleted) {\r\n  //     const title = document.getElementById('title').value;\r\n  //     const author = document.getElementById('authorname').value;\r\n  //     const pages = document.getElementById('pages').value;\r\n  //     const genre = document.getElementById('genre').value;\r\n  //     const haveRead = document.querySelector('input[name=\"haveRead\"]:checked').value;\r\n  //     // console.log(title);\r\n  //     // console.log(author);\r\n  //     // console.log(pages);\r\n  //     // console.log(genre);\r\n  //     // console.log(haveRead);\r\n  //     const newBook = {\r\n  //       title: title,\r\n  //       author: author,\r\n  //       numPages: pages,\r\n  //       genre: genre,\r\n  //       isRead:haveRead\r\n  //     };\r\n  //     this.setState=({formValidated:true, newBook:newBook});\r\n  //     return newBook;\r\n  //     // console.log(newBook);\r\n  //   } else {\r\n  //     alert('Please fill out all fields');\r\n  //   }\r\n  // }  \r\n\r\n  handleFormClick() {\r\n    console.log(\"something was clicked\");\r\n    console.log(this.state.isVisible);\r\n    // this.setState=( {isVisible: true}, () => {\r\n    //   console.log(this.state.isVisible);\r\n    // });\r\n    // this.setState = ({visibility:'visible'});\r\n    this.setState = ({ isVisible: true });\r\n    // console.log(this.state.isVisible);\r\n    \r\n  }\r\n\r\n  render() {\r\n    if (this.state.isVisible===true) {\r\n      return (\r\n        <form id=\"addBookForm\" visibility='visible' completed='false'>\r\n          <h1>Want to Add a New Book?</h1>\r\n          <h2>Sorry, new book addition is not available for now.</h2>\r\n          <h2>This is a front-end only webpage for now.</h2>\r\n          <p>\r\n            <label htmlFor=\"title\"> What is the title of the book?</label>\r\n            <input id=\"title\" name=\"booktitle\" required />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"author\"> Who is the author of the book?</label>\r\n            <input id=\"authorname\" name=\"authorname\" required />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"pages\"> How many pages does the book have?</label>\r\n            <input id=\"pages\" name=\"pages\" required />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"genre\">What genre is the book?</label>\r\n            <input id=\"genre\" name=\"genre\" required />\r\n          </p>\r\n      {/*TODO: known crash case. if you submit without clicking radio button.  */}\r\n          <p>\r\n            Have you finished this book?\r\n            <label htmlFor=\"haveRead\"> Yes</label>\r\n            <input type=\"radio\" name=\"haveRead\" value = \"true\" />\r\n            <label htmlFor=\"haventRead\">Nope</label>\r\n            <input id ='haveRead' type=\"radio\" name=\"haveRead\" value = \"false\" />\r\n          </p>\r\n          {/* <button onClick= {this.handleFormSubmit}>Submit</button> */}\r\n          <button onClick = {this.props.handleSubmit} >Submit (disabled) </button>\r\n        </form>\r\n      );\r\n    } else {\r\n      console.log(\"This is the current state \" + this.state.isVisible);\r\n      return (\r\n        <div>\r\n          <button id=\"addBookForm\" onClick={this.handleFormClick}>\r\n          Add a New Book~~!\r\n          </button>\r\n          {/* <form id=\"addBookForm\" visibility='hidden'></form> */}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// function addBooktoLibrary() {\r\n//   var newBook=[\r\n//     title: 'book1',\r\n//     author: 'autho1 ',\r\n//     numPages: '1235',\r\n//     isRead: false,\r\n//     genre: 'scifi' }\r\n//   ];\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { NewBookFormEntry } from \"./newBookForm\";\r\n\r\n// dont touch this for now.\r\n// I'll set up form entry once the library display is good.\r\n// class AddNewBookForm extends React.Component {\r\n//   render() {\r\n//     // return <NewBookFormEntry />\r\n//     return (\r\n//       <button> Add a New Book to the Library!</button>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// class AddNewBookForm extends React.Component {\r\n//   render() {\r\n//     return <NewBookFormEntry />;\r\n//   }\r\n// }\r\n\r\n// this component displays the 'read' toggle button\r\nclass ReadToggle extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isReadorNot: this.props.thisBook.isRead\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    let newReadStatus = this.state.isReadorNot === true ? false : true;\r\n    this.setState({ isReadorNot: newReadStatus });\r\n  }\r\n  render() {\r\n    let isReadButton;\r\n    if (this.state.isReadorNot === true) {\r\n      isReadButton = \"Finished!\";\r\n    } else {\r\n      isReadButton = \"Working on It\";\r\n    }\r\n    return (\r\n      <h3>\r\n        Have you finished the book?\r\n        <button onClick={this.handleClick}>\r\n          {/* {this.state.isReadorNot.toString()} */}\r\n          {isReadButton}\r\n        </button>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nclass RemoveBookFromLibrary extends React.Component {\r\n  render() {\r\n    return (\r\n      <button title={this.props.title} onClick={this.props.onClick}>\r\n        Remove this Book from Library\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nclass SingleBook extends React.Component {\r\n  render() {\r\n    const aBook = this.props.aBook;\r\n    const title = aBook.title;\r\n    const author = aBook.author;\r\n    const numPages = aBook.numPages;\r\n    const genre = aBook.genre;\r\n    return (\r\n      <div className=\"bookContainer\">\r\n        <h1>Title: {title}</h1>\r\n        <h2>Author: {author}</h2>\r\n        <h2>Pages: {numPages}</h2>\r\n        <h2>Genre: {genre}</h2>\r\n        <ReadToggle thisBook={aBook} />\r\n        <br />\r\n        <RemoveBookFromLibrary title={title} onClick={this.props.onClick} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass LibraryContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allBooks: [\r\n        {\r\n          title: \"Lord of the Rings: Fellowship of the Ring\",\r\n          author: \"JRR Tolkien \",\r\n          numPages: \"1235\",\r\n          isRead: true,\r\n          genre: \"Fantasy\"\r\n        },\r\n        {\r\n          title: \"Lord of the Rings: The Two Towers\",\r\n          author: \"JRR Tolkien \",\r\n          numPages: \"1235\",\r\n          isRead: false,\r\n          genre: \"Fantasy\"\r\n        },\r\n        {\r\n          title: \"Lord of the Rings: Return of the King\",\r\n          author: \"JRR Tolkien \",\r\n          numPages: \"1235\",\r\n          isRead: false,\r\n          genre: \"Fantasy\"\r\n        },\r\n        {\r\n          title: \"Game of Thrones\",\r\n          author: \"George R R Martin \",\r\n          numPages: \"1235\",\r\n          isRead: true,\r\n          genre: \"Fantasy\"\r\n        },\r\n        {\r\n          title: \"Cell \",\r\n          author: \"Stephen King \",\r\n          numPages: \"1235\",\r\n          isRead: false,\r\n          genre: \"horror\"\r\n        },\r\n        {\r\n          title: \"Design It Yourself\",\r\n          author: \"Ellen Lipton\",\r\n          numPages: \"1235\",\r\n          isRead: false,\r\n          genre: \"DIY\"\r\n        },\r\n        {\r\n          title: \"Fullmetal Alchemist\",\r\n          author: \"Hiromu Arakawa\",\r\n          numPages: \"1235\",\r\n          isRead: false,\r\n          genre: \"manga\"\r\n        }\r\n      ]\r\n    };\r\n    this.handleRemoveClick = this.handleRemoveClick.bind(this);\r\n  }\r\n\r\n  // Even handler for removing books\r\n  handleRemoveClick(e) {\r\n    const theTitle = e.currentTarget.title;\r\n    console.log(\"this is the book to remove\" + theTitle);\r\n\r\n    const allBooks1 = this.state.allBooks;\r\n    const index = allBooks1.findIndex(eachBook => eachBook.title === theTitle);\r\n    allBooks1.splice(index, 1);\r\n    this.setState({ allBooks: allBooks1 });\r\n  }\r\n\r\n  render() {\r\n    const rows = [];\r\n    this.state.allBooks.forEach(bookinlist => {\r\n      rows.push(\r\n        <SingleBook\r\n          aBook={bookinlist}\r\n          title={bookinlist.title}\r\n          key={bookinlist.title}\r\n          onClick={this.handleRemoveClick}\r\n        />\r\n      );\r\n    });\r\n\r\n    return <div id=\"librarycontainer2\">{rows}</div>;\r\n  }\r\n}\r\n\r\n\r\nclass Library extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dummystate: \"blank\",\r\n      newBook: { title: \"Your new book will go here\", key: \"placeholder\" },\r\n      formValidated: 'false'\r\n    };\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n  }\r\n  handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    const allinputs = document.querySelectorAll(\"input[required]\");\r\n    // console.log(allinputs);\r\n    var formcompleted = true;\r\n    var buttonscompleted = false;\r\n    allinputs.forEach((inputitem, index) => {\r\n      // console.log(inputitem.value);\r\n      if (inputitem.value === null || inputitem.value == \"\") {\r\n        formcompleted = false;\r\n      }\r\n    });\r\n    const radioinputs = document.getElementsByName(\"haveRead\");\r\n    radioinputs.forEach(onebutton => {\r\n      if (onebutton.checked) {\r\n        buttonscompleted = true;\r\n      }\r\n    });\r\n    if (formcompleted && buttonscompleted) {\r\n      const title = document.getElementById(\"title\").value;\r\n      const author = document.getElementById(\"authorname\").value;\r\n      const pages = document.getElementById(\"pages\").value;\r\n      const genre = document.getElementById(\"genre\").value;\r\n      const haveRead = document.querySelector('input[name=\"haveRead\"]:checked')\r\n        .value;\r\n      console.log(title);\r\n      // console.log(author);\r\n      // console.log(pages);\r\n      // console.log(genre);\r\n      // console.log(haveRead);\r\n      const newBook = {\r\n        title: title,\r\n        author: author,\r\n        numPages: pages,\r\n        genre: genre,\r\n        isRead: haveRead\r\n      };\r\n      console.log(this.state.formValidated);\r\n      this.setState = ({ formValidated: 'true' },\r\n      function() {\r\n        console.log(this.state.formValidated);\r\n      });\r\n      this.setState = { newBook: newBook };\r\n      console.log(this.state.newBook);\r\n      const asRead = haveRead ? 'read' : 'not read' ;\r\n      alert(`Your book would have been added with \r\n      Title: ${title}, \r\n      Author: ${author}, \r\n      Pages: ${pages}, \r\n      Genre: ${genre} \r\n      and marked as ${asRead} `);\r\n      // console.log(newBook);\r\n    } else {\r\n      alert(\"Please fill out all fields\");\r\n    }\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NewBookFormEntry handleSubmit={this.handleFormSubmit} />\r\n        {/* <SingleBook aBook={this.state.newBook} /> */}\r\n        <LibraryContainer books={this.props.booksList} />\r\n        {/* <AddNewBookForm /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// This is a list of 'book' objects\r\n// This version of the library project does not have backend data\r\n// const BOOKSLIST = [\r\n//   { title: 'book1', author: 'autho1 ', numPages: '1235', isRead: false, genre: 'scifi' },\r\n//   { title: 'book2', author: 'autho2 ', numPages: '1235', isRead: false, genre: 'scifi' },\r\n//   { title: 'book3', author: 'autho3 ', numPages: '1235', isRead: false, genre: 'autoBio' },\r\n//   { title: 'book4', author: 'autho4 ', numPages: '1235', isRead: true, genre: 'scifi' },\r\n//   { title: 'book5', author: 'autho5 ', numPages: '1235', isRead: false, genre: 'scifi' },\r\n//   { title: 'book6', author: 'autho6 ', numPages: '1235', isRead: false, genre: 'scifi' },\r\n//   { title: 'book7', author: 'autho8 ', numPages: '1235', isRead: false, genre: 'scifi' }\r\n// ];\r\n\r\nReactDOM.render(\r\n  <Library />,\r\n  // <Library booksList={BOOKSLIST} />,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}